---
description: 
globs: 
alwaysApply: true
---
هيكلية المشروع - تطبيق قوائم التسوق التفاعلية
نظرة عامة
هيكلية المشروع تهدف إلى تنظيم الكود والملفات لتطبيق ويب يتيح إنشاء قوائم تسوق، إرسالها، والتفاعل معها. الهيكلية مصممة لتكون واضحة، قابلة للتوسع، وسهلة الصيانة، مع تقليل الأخطاء من خلال قواعد كتابة محددة.

###
├── public/                  # الملفات العامة
│   ├── index.html           # صفحة HTML الرئيسية
│   ├── favicon.ico          # أيقونة الموقع
│   └── manifest.json        # ملف تكوين التطبيق
├── src/                     # مجلد المصدر الرئيسي
│   ├── assets/              # الأصول الثابتة
│   │   ├── images/          # الصور (مثل الشعار)
│   │   └── styles/          # ملفات CSS عامة (إن وجدت)
│   ├── components/          # المكونات القابلة لإعادة الاستخدام
│   │   ├── ui/              # مكونات واجهة المستخدم العامة
│   │   │   ├── Button.tsx   # زر قابل للتخصيص
│   │   │   ├── Input.tsx    # حقل إدخال
│   │   │   └── Card.tsx     # بطاقة عرض
│   │   └── layout/          # مكونات التخطيط
│   │       ├── Navbar.tsx   # شريط التنقل السفلي
│   │       └── Header.tsx   # رأس الصفحة
│   ├── pages/               # الصفحات الرئيسية
│   │   ├── Login.tsx        # تسجيل الدخول / التسجيل
│   │   ├── Home.tsx         # الصفحة الرئيسية
│   │   ├── CreateList.tsx   # إنشاء القائمة
│   │   ├── Contacts.tsx     # الأشخاص
│   │   ├── Messages.tsx     # الرسائل / القوائم الواردة
│   │   ├── ListView.tsx     # عرض القائمة
│   │   └── Profile.tsx      # الملف الشخصي
│   ├── hooks/               # هوكس مخصصة
│   │   ├── useAuth.ts       # إدارة المصادقة
│   │   └── useRealtime.ts   # التحديثات الفورية
│   ├── services/            # الخدمات والتكاملات
│   │   ├── supabase.ts      # تكامل Supabase
│   │   └── firebase.ts      # تكامل Firebase للإشعارات
│   ├── types/               # تعريفات TypeScript
│   │   ├── user.ts          # أنواع بيانات المستخدم
│   │   ├── list.ts          # أنواع بيانات القائمة
│   │   └── message.ts       # أنواع بيانات الرسائل
│   ├── utils/               # أدوات مساعدة
│   │   └── formatDate.ts    # تنسيق التواريخ
│   ├── App.tsx              # المكون الرئيسي للتطبيق
│   ├── index.tsx            # نقطة الدخول
│   └── routes.tsx           # إعدادات التنقل (React Router)
├── .gitignore               # الملفات المستثناة من Git
├── package.json             # تبعيات المشروع ونصوص التشغيل
├── tsconfig.json            # إعدادات TypeScript
└── tailwind.config.js       # إعدادات Tailwind CSS
وصف الهيكلية
public/: يحتوي على الملفات الثابتة التي يتم تقديمها مباشرة للمتصفح.
src/: المجلد الرئيسي للكود المصدري.
assets/: الصور وأي ملفات CSS عامة (يُفضل تقليل الاعتماد عليها مع Tailwind).
components/: مكونات قابلة لإعادة الاستخدام، مقسمة إلى:
ui/: مكونات واجهة مستخدم عامة (مثل الأزرار والحقول).
layout/: مكونات التخطيط (مثل شريط التنقل).
pages/: الصفحات الرئيسية للتطبيق، كل صفحة في ملف منفصل.
hooks/: هوكس مخصصة لإدارة المنطق (مثل المصادقة والتحديثات الفورية).
services/: ملفات للتكامل مع خدمات خارجية (Supabase، Firebase).
types/: تعريفات TypeScript لضمان تناسق البيانات.
utils/: أدوات مساعدة عامة (مثل تنسيق التواريخ).
ملفات الجذر: إعدادات المشروع (TypeScript، Tailwind، إلخ).
قواعد الكتابة
لضمان جودة الكود وتقليل الأخطاء:

التناسق في التسمية:
استخدام CamelCase لأسماء الملفات والمتغيرات (مثل CreateList.tsx).
أسماء المكونات تبدأ بحرف كبير (مثل Button.tsx).
أسماء الدوال تبدأ بحرف صغير (مثل formatDate).
TypeScript:
تعريف أنواع لجميع البيانات (مثل User, ListItem) في مجلد types/.
تجنب استخدام any إلا في حالات استثنائية مع تعليق توضيحي.
تقسيم المكونات:
كل مكون يجب أن يكون صغيرًا ويركز على وظيفة واحدة (Single Responsibility).
فصل المنطق عن العرض باستخدام Hooks (مثل useAuth).
التعليقات:
كتابة تعليقات مختصرة للدوال المعقدة فقط (مثل // Formats date to local string).
تجنب التعليقات الزائدة للكود الواضح.
إدارة الحالة:
استخدام حالة محلية (Local State) للمكونات البسيطة.
استخدام Context أو مكتبة مثل Zustand للحالة العامة (Global State) إذا لزم الأمر.
التنسيق:
استخدام Prettier لتنسيق الكود تلقائيًا (إعدادات في package.json).
تطبيق ESLint مع قواعد TypeScript للتحقق من الأخطاء.
تهيئة الصيانة
لجعل المشروع سهل الصيانة على المدى الطويل:

التقسيم المنطقي:
فصل المكونات، الخدمات، والصفحات في مجلدات منفصلة لتسهيل الوصول.
تجميع التعريفات (Types) في types/ لإعادة الاستخدام.
التوثيق:
إضافة ملف README.md في الجذر يشرح كيفية تشغيل المشروع وتبعياته.
توثيق إعدادات الخدمات (مثل Supabase وFirebase) في ملف منفصل (مثل docs/services.md).
إعادة الاستخدام:
تصميم مكونات عامة في components/ui/ (مثل Button, Input) لتقليل التكرار.
استخدام خدمات مركزية في services/ للتعامل مع Supabase وFirebase.
التحديثات الفورية:
الاعتماد على Supabase Realtime لضمان تحديث البيانات دون تعقيدات يدوية.
النشر:
إعداد نشر تلقائي عبر Vercel مع تكامل CI/CD (مثل GitHub Actions).
تقليل الأخطاء
للحد من الأخطاء أثناء التطوير والصيانة:

TypeScript:
فرض الكتابة الثابتة لجميع المتغيرات والوظائف للكشف عن الأخطاء مبكرًا.
استخدام أنواع صارمة (Strict Mode) في tsconfig.json.
الاختبار:
كتابة اختبارات وحدة (Unit Tests) للمكونات الرئيسية باستخدام Jest وReact Testing Library.
اختبار التكامل (Integration Tests) لتدفقات مثل إرسال القائمة والشطب.
التحقق التلقائي:
تكامل ESLint وPrettier في بيئة التطوير للكشف عن الأخطاء وتنسيق الكود.
إعداد Husky لتشغيل الفحوصات قبل كل Commit.
إدارة التبعيات:
تثبيت إصدارات محددة للمكتبات في package.json لتجنب التعارضات.
تحديث التبعيات دوريًا مع اختبار التغييرات.
التعامل مع الأخطاء:
إضافة معالجة أخطاء (Error Boundaries) في React لتجنب تعطل التطبيق.
تسجيل الأخطاء في الخدمات (مثل Supabase Logs) لتتبع المشكلات.